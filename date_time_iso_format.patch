diff --git a/boost_1_73_0/boost/date_time/iso_format.hpp b/boost_1_73_0/boost/date_time/iso_format.hpp
index 2e7942d8b..d4b3b8fff 100644
--- a/boost_1_73_0/boost/date_time/iso_format.hpp
+++ b/boost_1_73_0/boost/date_time/iso_format.hpp
@@ -272,6 +272,137 @@ public:
 
 #endif // BOOST_NO_STD_WSTRING
 
+#ifndef BOOST_NO_STD_U16STRING
+
+//! Class to provide common iso formatting spec
+template<>
+class iso_format_base<char16_t> {
+public:
+  //! Describe month format -- its an integer in iso format
+  static month_format_spec month_format()
+  {
+    return month_as_integer;
+  }
+
+  //! String used printed is date is invalid
+  static const char16_t* not_a_date()
+  {
+    return u"not-a-date-time";
+  }
+  //! String used to for positive infinity value
+  static const char16_t* pos_infinity()
+  {
+    return u"+infinity";
+  }
+  //! String used to for positive infinity value
+  static const char16_t* neg_infinity()
+  {
+    return u"-infinity";
+  }
+
+  //! ISO char for a year -- used in durations
+  static char16_t year_sep_char()
+  {
+    return 'Y';
+  }
+  //! ISO char for a month
+  static char16_t month_sep_char()
+  {
+    return '-';
+  }
+  //! ISO char for a day
+  static char16_t day_sep_char()
+  {
+    return '-';
+  }
+  //! char for minute
+  static char16_t hour_sep_char()
+  {
+    return ':';
+  }
+  //! char for minute
+  static char16_t minute_sep_char()
+  {
+    return ':';
+  }
+  //! char for second
+  static char16_t second_sep_char()
+  {
+    return ':';
+  }
+  //! ISO char for a period
+  static char16_t period_start_char()
+  {
+    return 'P';
+  }
+  //! Used in time in mixed strings to set start of time
+  static char16_t time_start_char()
+  {
+    return 'T';
+  }
+
+  //! Used in mixed strings to identify start of a week number
+  static char16_t week_start_char()
+  {
+    return 'W';
+  }
+
+  //! Separators for periods
+  static char16_t period_sep_char()
+  {
+    return '/';
+  }
+  //! Separator for hh:mm:ss
+  static char16_t time_sep_char()
+  {
+    return ':';
+  }
+  //! Preferred Separator for hh:mm:ss,decimal_fraction
+  static char16_t fractional_time_sep_char()
+  {
+    return ',';
+  }
+
+  static bool is_component_sep(char16_t sep)
+  {
+    switch(sep) {
+    case 'H':
+    case 'M':
+    case 'S':
+    case 'W':
+    case 'T':
+    case 'Y':
+    case 'D':return true;
+    default:
+      return false;
+    }
+  }
+
+  static bool is_fractional_time_sep(char16_t sep)
+  {
+    switch(sep) {
+    case ',':
+    case '.': return true;
+    default: return false;
+    }
+  }
+  static bool is_timezone_sep(char16_t sep)
+  {
+    switch(sep) {
+    case '+':
+    case '-': return true;
+    default: return false;
+    }
+  }
+  static char16_t element_sep_char()
+  {
+    return '-';
+  }
+
+};
+
+#endif // BOOST_NO_STD_U16STRING
+
 //! Format description for iso normal YYYYMMDD
 template<class charT>
 class iso_format : public iso_format_base<charT> {
