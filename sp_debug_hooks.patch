--- a/boost_1_82_0/boost/serialization/detail/shared_count_132.hpp
+++ b/boost_1_82_0/boost/serialization/detail/shared_count_132.hpp
@@ -190,12 +190,12 @@ public:
 
 template<class T> void cbi_call_constructor_hook(sp_counted_base * pn, T * px, boost::checked_deleter< T > const &)
 {
-    boost::sp_scalar_constructor_hook(px, sizeof(T), pn);
+    boost::sp_scalar_constructor_hook(const_cast<void*>(reinterpret_cast<const void*>(px)), sizeof(T), pn);
 }
 
 template<class T> void cbi_call_constructor_hook(sp_counted_base *, T * px, boost::checked_array_deleter< T > const &)
 {
-    boost::sp_array_constructor_hook(px);
+    boost::sp_array_constructor_hook(const_cast<void*>(reinterpret_cast<const void*>(px)));
 }
 
 template<class P, class D> void cbi_call_constructor_hook(sp_counted_base *, P const &, D const &, long)
@@ -204,12 +204,12 @@ template<class P, class D> void cbi_call_constructor_hook(sp_counted_base *, P c
 
 template<class T> void cbi_call_destructor_hook(sp_counted_base * pn, T * px, boost::checked_deleter< T > const &)
 {
-    boost::sp_scalar_destructor_hook(px, sizeof(T), pn);
+    boost::sp_scalar_destructor_hook(const_cast<void*>(reinterpret_cast<const void*>(px)), sizeof(T), pn);
 }
 
 template<class T> void cbi_call_destructor_hook(sp_counted_base *, T * px, boost::checked_array_deleter< T > const &)
 {
-    boost::sp_array_destructor_hook(px);
+    boost::sp_array_destructor_hook(const_cast<void*>(reinterpret_cast<const void*>(px)));
 }
 
 template<class P, class D> void cbi_call_destructor_hook(sp_counted_base *, P const &, D const &, long)
--- a/boost_1_82_0/boost/smart_ptr/detail/sp_counted_impl.hpp
+++ b/boost_1_82_0/boost/smart_ptr/detail/sp_counted_impl.hpp
@@ -77,14 +77,14 @@ public:
     explicit sp_counted_impl_p( X * px ): px_( px )
     {
 #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
-        boost::sp_scalar_constructor_hook( px, sizeof(X), this );
+        boost::sp_scalar_constructor_hook( const_cast<void*>(reinterpret_cast<const void*>(px)), sizeof(X), this );
 #endif
     }
 
     void dispose() BOOST_SP_NOEXCEPT BOOST_OVERRIDE
     {
 #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
-        boost::sp_scalar_destructor_hook( px_, sizeof(X), this );
+        boost::sp_scalar_destructor_hook( const_cast<void*>(reinterpret_cast<const void*>(px_)), sizeof(X), this );
 #endif
         boost::checked_delete( px_ );
     }
--- a/boost_1_82_0/boost/smart_ptr/scoped_ptr.hpp
+++ b/boost_1_82_0/boost/smart_ptr/scoped_ptr.hpp
@@ -66,7 +66,7 @@ public:
     explicit scoped_ptr( T * p = 0 ) BOOST_SP_NOEXCEPT : px( p )
     {
 #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
-        boost::sp_scalar_constructor_hook( px );
+        boost::sp_scalar_constructor_hook( const_cast<void*>(reinterpret_cast<const void*>(px)) );
 #endif
     }
 
@@ -75,7 +75,7 @@ public:
     explicit scoped_ptr( std::auto_ptr<T> p ) BOOST_SP_NOEXCEPT : px( p.release() )
     {
 #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
-        boost::sp_scalar_constructor_hook( px );
+        boost::sp_scalar_constructor_hook( const_cast<void*>(reinterpret_cast<const void*>(px)) );
 #endif
     }
 
@@ -84,7 +84,7 @@ public:
     ~scoped_ptr() BOOST_SP_NOEXCEPT
     {
 #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
-        boost::sp_scalar_destructor_hook( px );
+        boost::sp_scalar_destructor_hook( const_cast<void*>(reinterpret_cast<const void*>(px)) );
 #endif
         boost::checked_delete( px );
     }
--- a/boost_1_82_0/libs/smart_ptr/extras/src/sp_debug_hooks.cpp
+++ b/boost_1_82_0/libs/smart_ptr/extras/src/sp_debug_hooks.cpp
@@ -21,20 +21,13 @@ int const m = 2; // m * sizeof(int) must be aligned appropriately
 int const allocated_scalar  = 0x1234560C;
 int const allocated_array   = 0x1234560A;
 int const adopted_scalar    = 0x0567890C;
-int const adopted_array     = 0x0567890A;
+//int const adopted_array     = 0x0567890A;
 int const deleted           = 0x498769DE;
 
 using namespace std; // for compilers where things aren't in std
 
 // operator new
 
-static new_handler get_new_handler()
-{
-    new_handler p = set_new_handler(0);
-    set_new_handler(p);
-    return p;
-}
-
 static void * allocate(size_t n, int mark)
 {
     int * pm;
@@ -60,7 +53,7 @@ static void * allocate(size_t n, int mark)
     return pm + m;
 }
 
-void * operator new(size_t n) throw(bad_alloc)
+void * operator new(size_t n)
 {
     void * p = allocate(n, allocated_scalar);
 
@@ -75,14 +68,14 @@ void * operator new(size_t n) throw(bad_alloc)
 
 #if !defined(BOOST_BORLANDC) || (BOOST_BORLANDC > 0x551)
 
-void * operator new(size_t n, nothrow_t const &) throw()
+void * operator new(size_t n, nothrow_t const &)
 {
     return allocate(n, allocated_scalar);
 }
 
 #endif
 
-void * operator new[](size_t n) throw(bad_alloc)
+void * operator new[](size_t n)
 {
     void * p = allocate(n, allocated_array);
 
